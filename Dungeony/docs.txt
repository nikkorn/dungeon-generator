GAMEPLAY
########

Gameplay involves completing levels to move on to other levels, eventually reaching a final level.

There are six types of level:
- INITIAL:    A small safe level where some super basic equipment spawns in chests to start out with with a door to a NORMAL level.
- NORMAL:     A normal level will have many easy/moderate enemies to to defeat and have:
                - A door to the next level (NORMAL/CAMP/CHALLENGE).
                - An optional door to a shop level (25% chance?).
- CHALLENGE:  A level with a few difficult enemies and better loot, and a door to the next level (NORMAL/CAMP).
- CAMP:       A safe level which is a campsite where players can upgrade gear and skills and rest at a bonfire for HP and a door to the next level (NORMAL/CHALLENGE).
              Quests can also be picked up from camp for mad rewards, like:
                - Take a package to another npc at a future camp level, which may be heavy and slow to move while carrying or have other negative effects.
                - Collect multiple items or a rare item from levels.
                - Escort an NPC through levels to a future camp, keeping them alive along the way.
- SHOP:       A small level with a merchant npc inside to buy materials from and a door to the next level (NORMAL/CHALLENGE).
- FINAL:      Not too sure, maybe a boss or just a cutscene, or a place to review stats and run speed.

The type of level that a level door will take you to is random, but there are restrictions.
- A player will have to visit between 2-4? NORMAL levels before reaching a CHALLENGE or CAMP level.
- A player will have to visit between 4-8? NORMAL or CHALLENGE levels after a CAMP level to reach the next CAMP level.
- A player will have to visit between 16-24? NORMAL or CHALLENGE levels before reaching the FINAL level.


IDEAS
#####
Loot weighs players down and slows them, saving loot means buying better weapons but can you get enough before you die?
Demons can be found who will deal and give a buff/weapon but will algo give a negative buff. Some demons could also not say what the negative is as a gamble?
Each player has their own inventory that they can open in a small portion of the display in real time?
Other innocent (or not) travellers can be killed in levels for loot or as part of a quest. this can make you hated and not dealt with at camps or even have a chance to send a super strong bounty hunter after you.
Players that are killed can be revived by other players with a rare item?


ENTITY COLLISIONS
#################

Entity collisions can be taken care of with something like the following:

const flag = {
  "NOTHING": 0,
  "WALL": 1,
  "CHARACTER": 2,
  "PICKUP":  4,
  "PROJECTILE": 8,
  "OBJECT":  16
}

function createObject(name, flag, mask) {
  return {
  	name, flag, mask
  };
}

const objects = [
  createObject("wall", flag.WALL, flag.CHARACTER | flag.PICKUP | flag.PROJECTILE | flag.OBJECT),
  createObject("player", flag.CHARACTER, flag.WALL | flag.CHARACTER | flag.PICKUP | flag.OBJECT),
  createObject("enemy", flag.CHARACTER, flag.WALL | flag.CHARACTER | flag.PICKUP | flag.OBJECT),
  createObject("ghost", flag.CHARACTER, flag.WALL),
  createObject("pot", flag.OBJECT, flag.WALL | flag.CHARACTER | flag.PICKUP | flag.PROJECTILE | flag.OBJECT),
  createObject("walkable_trap", flag.OBJECT, flag.NOTHING),
  createObject("chest", flag.OBJECT, flag.WALL | flag.CHARACTER | flag.PICKUP | flag.PROJECTILE | flag.OBJECT),
  createObject("bullet", flag.PROJECTILE, flag.WALL | flag.CHARACTER | flag.OBJECT),
  createObject("grenade", flag.PROJECTILE, flag.WALL | flag.CHARACTER | flag.OBJECT),
  createObject("ammo_drop", flag.PICKUP, flag.WALL | flag.OBJECT)
];

const results = [];

for (var attempt = 0; attempt < 100; attempt++) {
  var first  = objects[Math.floor(Math.random()*objects.length)];
  var second = objects[Math.floor(Math.random()*objects.length)];

  results.push({
  	collides: (first.mask & second.flag) && (second.mask & first.flag),
    pair: `${first.name} and ${second.name}`
  });
}

console.log("###################### COLLISION ######################");
results.filter((result) => result.collides).forEach((result) => console.log(result.pair));
console.log("#######################################################");

console.log("##################### NO COLLISION ####################");
results.filter((result) => !result.collides).forEach((result) => console.log(result.pair));
console.log("#######################################################");